---
- name: USECASE3-AS3
  hosts: lb
  connection: local
  gather_facts: false

  vars_files:
    - vars/f5_vars.yml
  vars_prompt:
    - name: "git_username"
      prompt: "Enter your Git Username"
      private: no
    - name: "git_password"
      prompt: "Enter your Git Password"
      private: yes


  tasks:

#hardcode timestamp into variable
  - set_fact:
      ASM_Final_File_Name: "{{F5_VIP_Name}}-ASMPolicy-{{ lookup('pipe','date +%Y-%m-%d-%H-%M-%S') }}.xml"

  - name: Commit Changes to Git
    shell: |
      git config --global user.email "m.mabis@f5.com"
      git config --global user.name "{{git_username}}"
  
  - name: Get latest DO RPM name
    action: shell wget -O - {{do_uri}} | grep -E rpm | head -1 | cut -d "/" -f 7 | cut -d "=" -f 1 |  cut -d "\"" -f 1
    register: do_output

  - set_fact:
     do_release: "{{do_output.stdout_lines[0]}}"

  - name: Get latest DO RPM version
    action: shell wget -O - {{do_uri}} | grep -E rpm | head -1 | cut -d "/" -f 6
    register: do_output

  - set_fact:
     do_release_tag: "{{do_output.stdout_lines[0]}}"

  - name: Grab DO RPM from github
    get_url:
     url: "{{do_uri}}/download/{{do_release_tag}}/{{do_release}}?raw=true"
     dest: "~/"
     validate_certs: false

  - name: Set a fact named 'provider' with BIG-IP login information
    set_fact:
     provider:
      server: "{{private_ip}}"
      user: "{{ansible_user}}"
      password: "{{ansible_ssh_pass}}"
      server_port: 8443
      validate_certs: no

  - name: Grab the DO version from the home directory
    shell: ls -Art ~/*.rpm | tail -n 1 | rev | cut -d/ -f 1 | rev
    register: ls_output

  - set_fact:
     do_rpm: "{{ls_output.stdout}}"

  - name: Install DO
    bigip_iapplx_package:
     package: "~/{{do_rpm}}"
     provider: "{{provider}}"
    register: install_do

  - name: Pause for Install to complete
    pause:
      minutes: 1
    when: install_do.changed

  - name: GET ASM - Module Install Status
    uri:
      url: "https://{{ ansible_host }}:8443/mgmt/tm/sys/provision/asm"
      method: GET
      status_code: 200
      timeout: 300
      force_basic_auth: true
      user: "{{ ansible_user }}"
      password: "{{ ansible_ssh_pass }}"
      validate_certs: false
    delegate_to: localhost
    register: installed_status

  - name: Install ASM - Push via DO (if not Installed)
    uri:
      url: "https://{{ ansible_host }}:8443/mgmt/shared/declarative-onboarding/declare"
      method: POST
      body: "{{ lookup('template','j2/provision.j2', split_lines=False) }}"
      status_code: 202
      timeout: 300
      body_format: json
      force_basic_auth: true
      user: "{{ ansible_user }}"
      password: "{{ ansible_ssh_pass }}"
      validate_certs: false
    delegate_to: localhost
    when: installed_status.json.level != "nominal"

  - name: Wait for API to be Ready
    bigip_wait:
      timeout: 300
      provider: "{{provider}}"
    delegate_to: localhost

  - name: Pause for install of ASM to complete
    pause:
      minutes: 3
    when: installed_status.json.level != "nominal"

  - name: Check if Repo Exists
    ansible.builtin.uri:
      url: https://api.bitbucket.org/2.0/repositories/vdi-tech-guy/
      method: GET
      user: "{{git_username}}"
      password: "{{git_password}}"
      force_basic_auth: yes
      status_code: 200
      body_format: json
    delegate_to: localhost
    register: repo_info

  - name: check if repo exists
    set_fact:
      student_id: "{{ item }}"
    with_items: "{{repo_info.json['values']}}"
    when: item.name == repo_name

  - name: Removes directory if Exists
    file:
      path: ~/asm-xml-files
      state: absent

  - name: Removes directory if Exists
    file:
      path: ~/asm-xml-files-student
      state: absent

  - name: Git checkout
    ansible.builtin.git:
      repo: "https://{{git_username | urlencode }}:{{git_password | urlencode}}@bitbucket.org/vdi-tech-guy/f5-asm-policies.git"
      dest: ~/asm-xml-files
    when: student_id is undefined

  - name: Copy Master Template to TMP
    ansible.builtin.copy:
      src: "{{ASM_Master_File}}"
      dest: "{{ ASM_Policy_File }}"
    when: student_id is undefined

  - name: Git checkout
    ansible.builtin.git:
      repo: "https://{{git_username | urlencode }}:{{git_password | urlencode}}@bitbucket.org/vdi-tech-guy/{{repo_name}}"
      dest: ~/asm-xml-files
    ignore_errors: true
    when: student_id is defined

  - name: Find Latest File
    action: shell ls ~/asm-xml-files -Artf | tail -n 1
    register: latest_file_output
    when: student_id is defined

  - debug:
      var: latest_file_output.stdout
    when: student_id is defined

  - name: Copy Master Template to TMP
    ansible.builtin.copy:
      src: "~/asm-xml-files/{{latest_file_output.stdout}}"
      dest: "{{ ASM_Policy_File }}"
    when: student_id is defined

  - name: Get Checksum of Master file
    stat:
      path : "{{ ASM_Policy_File }}"
    register: first_file
  
  - name: Master Template SHA1
    set_fact:
      file1_sha: "{{ first_file.stat.checksum }}"  

#Validate Existing IP Addresses
  - name: Validate Existing IP Addresses
    shell: grep "<ip_address>{{ item }}" {{ ASM_Policy_File }}
    register: Blocked_IP_Valid
    with_items: "{{ Blocked_IPs }}"
    ignore_errors: yes
    when: Blocked_IPs is defined

#Import Additional Disallowed IPs
  - name: Add Disallowed IPs
    xml:
      path: "{{ ASM_Policy_File }}"
      pretty_print: yes
      input_type: xml
      insertafter: yes
      xpath: /policy/geolocation
      add_children: "<whitelist><ip_address>{{ item.item }}</ip_address><subnet_mask>255.255.255.255</subnet_mask><policy_builder_trusted>false</policy_builder_trusted><ignore_anomalies>false</ignore_anomalies><never_log>false</never_log><block_ip>Always</block_ip><never_learn>false</never_learn><description>blocked</description><ignore_ip_reputation>false</ignore_ip_reputation></whitelist>"
    with_items: "{{ Blocked_IP_Valid.results }}"
    when: Blocked_IPs is defined and item.rc == 1

#Validate Existing URL Addresses
  - name: Validate Existing URL Addresses
    shell: grep 'name="{{ item }}"' {{ ASM_Policy_File }}
    register: Blocked_URLs_Valid
    with_items: "{{ Blocked_URLs }}"
    ignore_errors: yes
    when: Blocked_URLs is defined

#create Disallowed URLs Section if missing
  - name: Add Disallowed URLs
    xml:
      path: "{{ ASM_Policy_File }}"
      input_type: xml
      pretty_print: yes
      insertafter: yes
      xpath: /policy/urls/url[*]
      add_children: "<disallowed_urls></disallowed_urls>"
    when: "'<disallowed_urls>' not in lookup('file', ASM_Policy_File ) and Blocked_URLs is defined"

#Import Additional Disallowed URLs
  - name: Add Disallowed URLs
    xml:
      path: "{{ ASM_Policy_File }}"
      input_type: xml
      pretty_print: yes
      xpath: /policy/urls/disallowed_urls
      add_children:
        - "<url protocol=\"HTTP\" type=\"explicit\" name=\"{{ item.item }}\"/>"
        - "<url protocol=\"HTTPS\" type=\"explicit\" name=\"{{ item.item }}\"/>"
    with_items: "{{ Blocked_URLs_Valid.results }}"
    when: Blocked_URLs is defined and item.rc == 1

#Enable Illegal URL Blocking Violations
  - name: Illegal URL Blocking Violations Enablement
    xml:
      path: "{{ ASM_Policy_File }}"
      input_type: xml
      pretty_print: yes
      xpath: /policy/blocking/violation[@name="Illegal URL"]
      set_children:
        - "<alarm>true</alarm>"
        - "<block>true</block>"
        - "<learn>true</learn>"
        - "<policy_builder_tracking>enabled</policy_builder_tracking>"
    when: Blocked_URLs is defined

  - name: Get Checksum of Modified file
    stat:
      path : "{{ ASM_Policy_File }}"
    register: second_file

  - name: Master Template SHA1
    set_fact:
      file2_sha: "{{ second_file.stat.checksum }}"

  - name: Compilation Changed
    set_fact:
      sha_matched: = "{{file2_sha and file1_sha}}"
    when:  file2_sha != file1_sha
   
  - name: Check if Repo Exists
    ansible.builtin.uri:
      url: https://api.bitbucket.org/2.0/repositories/vdi-tech-guy/
      method: GET
      user: "{{git_username}}"
      password: "{{git_password}}"
      force_basic_auth: yes
      status_code: 200
      body_format: json
    delegate_to: localhost
    register: repo_info
    when: sha_matched is defined

  - name: check if repo exists
    set_fact:
      student_id: "{{ item }}"
    with_items: "{{repo_info.json['values']}}"
    when: sha_matched is defined and item.name == repo_name

  - name: Create a Bitbucket Repo
    ansible.builtin.uri:
      url: https://api.bitbucket.org/2.0/repositories/vdi-tech-guy/{{repo_name}}
      method: POST
      user: "{{git_username}}"
      password: "{{git_password}}"
      body: "{{ lookup('template','j2/create_repo.j2', split_lines=False) }}"
      force_basic_auth: yes
      status_code: 200
      body_format: json
    delegate_to: localhost
    when: sha_matched is defined and student_id is undefined

  - name: Git checkout
    ansible.builtin.git:
      repo: "https://{{git_username | urlencode }}:{{git_password | urlencode}}@bitbucket.org/vdi-tech-guy/{{repo_name}}"
      dest: ~/asm-xml-files-student
    ignore_errors: true
    when: sha_matched is defined

  - name: Copy Modified File to Git Repo
    ansible.builtin.copy:
      src: "{{ASM_Policy_File}}"
      dest: "~/asm-xml-files-student/{{ASM_Final_File_Name}}"
    when: sha_matched is defined
    register: file_name_output

  - debug: 
      var: file_name_output

  - name: Commit Changes to Git
    shell: |
      cd ~/asm-xml-files-student/
      git add .
      git commit -m "ASM File Update $(date +"%Y-%m-%d %H:%M:%S")"
      git push
      exit 0
    when: sha_matched is defined

  - name: Ensure remote URL does not contain credentials
    git_config:
      name: remote.origin.url
      value: "https://bitbucket.org/vdi-tech-guy/f5-asm-policies.git"
      scope: local
      repo: ~/asm-xml-files
    when: sha_matched is defined

  - name: Ensure remote URL does not contain credentials
    git_config:
      name: remote.origin.url
      value: "https://bitbucket.org/vdi-tech-guy/{{repo_name}}"
      scope: local
      repo: ~/asm-xml-files-student
    when: sha_matched is defined
  
  - debug:
      var: ASM_Final_File_Name
     
  - name: PUSH AS3
    uri:
      url: "https://{{ ansible_host }}:8443/mgmt/shared/appsvcs/declare"
      method: POST
      body: "{{ lookup('template','j2/configure_as3.j2', split_lines=False) }}"
      status_code: 200
      timeout: 300
      body_format: json
      force_basic_auth: true
      user: "{{ ansible_user }}"
      password: "{{ ansible_ssh_pass }}"
      validate_certs: false
    delegate_to: localhost
    when: sha_matched is defined

  - name: PUSH AS3 ALT
    uri:
      url: "https://{{ ansible_host }}:8443/mgmt/shared/appsvcs/declare"
      method: POST
      body: "{{ lookup('template','j2/configure_as3_alt.j2', split_lines=False) }}"
      status_code: 200
      timeout: 300
      body_format: json
      force_basic_auth: true
      user: "{{ ansible_user }}"
      password: "{{ ansible_ssh_pass }}"
      validate_certs: false
    delegate_to: localhost
    when: sha_matched is not defined
