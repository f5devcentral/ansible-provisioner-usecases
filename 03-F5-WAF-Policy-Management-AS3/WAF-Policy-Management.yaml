---
- name: USECASE2-AS3
  hosts: lb
  connection: local
  gather_facts: false

  vars:
    pool_members: "{{ groups['web'] }}"
    F5_Admin_Port: "8443"
    F5_VIP_Name: Use-Case-3-VIP
    ASM_Master_File: "~/asm-xml-files/Master_Template_v16.xml"
    ASM_Policy_File: "/tmp/Modified_Master_Template_v16.xml"
    ASM_Final_File_Name: "{{F5_VIP_Name}}-ASMPolicy-{{ lookup('pipe','date +%Y-%m-%d') }}.xml"
    Blocked_URLs:
    - /blocked.html
    - /hacked.html
    - /robot.txt
    Blocked_IPs:
    - 10.192.1.199
    - 10.105.192.199
    - 172.16.192.199
    - 192.168.30.199
    - 192.172.1.1
    - 5.4.3.2 
    - 6.6.6.6
    repo_name: "{{lookup('env', 'USER')}}-repo"

  vars_prompt:
    - name: "git_username"
      prompt: "Enter your Git Username"
      private: no
    - name: "git_password"
      prompt: "Enter your Git Password"
      private: yes


  tasks:
  - name: Creates directory
    file:
      path: ~/asm-xml-files
      state: directory

  - name: Git checkout
    ansible.builtin.git:
      repo: "https://{{git_username | urlencode }}:{{git_password | urlencode}}@bitbucket.org/vdi-tech-guy/f5-asm-policies.git"
      dest: ~/asm-xml-files

  - name: Copy Master Template to TMP
    ansible.builtin.copy:
      src: "{{ASM_Master_File}}"
      dest: "{{ ASM_Policy_File }}"
      
#Validate Existing IP Addresses
  - name: Validate Existing IP Addresses
    shell: grep "<ip_address>{{ item }}" {{ ASM_Policy_File }}
    register: Blocked_IP_Valid
    with_items: "{{ Blocked_IPs }}"
    ignore_errors: yes
    when: Blocked_IPs is defined

#Import Additional Disallowed IPs
  - name: Add Disallowed IPs
    xml:
      path: "{{ ASM_Policy_File }}"
      pretty_print: yes
      input_type: xml
      insertafter: yes
      xpath: /policy/geolocation
      add_children: "<whitelist><ip_address>{{ item.item }}</ip_address><subnet_mask>255.255.255.255</subnet_mask><policy_builder_trusted>false</policy_builder_trusted><ignore_anomalies>false</ignore_anomalies><never_log>false</never_log><block_ip>Always</block_ip><never_learn>false</never_learn><description>blocked</description><ignore_ip_reputation>false</ignore_ip_reputation></whitelist>"
    with_items: "{{ Blocked_IP_Valid.results }}"
    when: Blocked_IPs is defined and item.rc == 1

#Validate Existing URL Addresses
  - name: Validate Existing URL Addresses
    shell: grep 'name="{{ item }}"' {{ ASM_Policy_File }}
    register: Blocked_URLs_Valid
    with_items: "{{ Blocked_URLs }}"
    ignore_errors: yes
    when: Blocked_URLs is defined

#create Disallowed URLs Section if missing
  - name: Add Disallowed URLs
    xml:
      path: "{{ ASM_Policy_File }}"
      input_type: xml
      pretty_print: yes
      insertafter: yes
      xpath: /policy/urls/url[*]
      add_children: "<disallowed_urls></disallowed_urls>"
    when: "'<disallowed_urls>' not in lookup('file', ASM_Policy_File ) and Blocked_URLs is defined"

#Import Additional Disallowed URLs
  - name: Add Disallowed URLs
    xml:
      path: "{{ ASM_Policy_File }}"
      input_type: xml
      pretty_print: yes
      xpath: /policy/urls/disallowed_urls
      add_children:
        - "<url protocol=\"HTTP\" type=\"explicit\" name=\"{{ item.item }}\"/>"
        - "<url protocol=\"HTTPS\" type=\"explicit\" name=\"{{ item.item }}\"/>"
    with_items: "{{ Blocked_URLs_Valid.results }}"
    when: Blocked_URLs is defined and item.rc == 1

#Enable Illegal URL Blocking Violations
  - name: Illegal URL Blocking Violations Enablement
    xml:
      path: "{{ ASM_Policy_File }}"
      input_type: xml
      pretty_print: yes
      xpath: /policy/blocking/violation[@name="Illegal URL"]
      set_children:
        - "<alarm>true</alarm>"
        - "<block>true</block>"
        - "<learn>true</learn>"
        - "<policy_builder_tracking>enabled</policy_builder_tracking>"
    when: Blocked_URLs is defined

  - name: Check if Repo Exists
    ansible.builtin.uri:
      url: https://api.bitbucket.org/2.0/repositories/vdi-tech-guy/
      method: GET
      user: "{{git_username}}"
      password: "{{git_password}}"
      force_basic_auth: yes
      status_code: 200
      body_format: json
    delegate_to: localhost
    register: repo_info

  - name: check if repo exists
    set_fact:
      student_id: "{{ item }}"
    with_items: "{{repo_info.json['values']}}"
    when: item.name == repo_name

  - debug:
      var: repo_name

  - name: Create a Bitbucket Repo
    ansible.builtin.uri:
      url: https://api.bitbucket.org/2.0/repositories/vdi-tech-guy/{{repo_name}}
      method: POST
      user: "{{git_username}}"
      password: "{{git_password}}"
      body: "{{ lookup('template','j2/create_repo.j2', split_lines=False) }}"
      force_basic_auth: yes
      status_code: 200
      body_format: json
    delegate_to: localhost
    when: student_id is undefined

  - name: Git checkout
    ansible.builtin.git:
      repo: "https://{{git_username | urlencode }}:{{git_password | urlencode}}@bitbucket.org/vdi-tech-guy/{{repo_name}}"
      dest: ~/asm-xml-files-student
    ignore_errors: true


  - name: Copy Modified File to Git Repo
    ansible.builtin.copy:
      src: "{{ASM_Policy_File}}"
      dest: "~/asm-xml-files-student/{{ASM_Final_File_Name}}"

  - name: Commit Changes to Git
    shell: |
      cd ~/asm-xml-files-student/
      git add .
      git commit -m "ASM File Update $(date +"%Y-%m-%d %H:%M:%S")"
      git push
      exit 0

  - name: Ensure remote URL does not contain credentials
    git_config:
      name: remote.origin.url
      value: "https://bitbucket.org/vdi-tech-guy/f5-asm-policies.git"
      scope: local
      repo: ~/asm-xml-files

  - name: Ensure remote URL does not contain credentials
    git_config:
      name: remote.origin.url
      value: "https://bitbucket.org/vdi-tech-guy/{{repo_name}}"
      scope: local
      repo: ~/asm-xml-files-student

  - name: PUSH AS3
    uri:
      url: "https://{{ ansible_host }}:8443/mgmt/shared/appsvcs/declare"
      method: POST
      body: "{{ lookup('template','j2/configure_as3.j2', split_lines=False) }}"
      status_code: 200
      timeout: 300
      body_format: json
      force_basic_auth: true
      user: "{{ ansible_user }}"
      password: "{{ ansible_ssh_pass }}"
      validate_certs: false
    delegate_to: localhost

